# For Licence details look at https://github.com/riscv-software-src/riscv-ctg/-/blob/master/LICENSE.incore

aes64ds:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zknd.*)
    opcode: 
      aes64ds: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(64, ["rs1_val","rs2_val"])': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [64, 64])': 0

aes64dsm:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zknd.*)
    opcode: 
      aes64dsm: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(64, ["rs1_val","rs2_val"])': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [64, 64])': 0

aes64es:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zkne.*)
    opcode: 
      aes64es: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(64, ["rs1_val","rs2_val"])': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [64, 64])': 0

aes64esm:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zkne.*)
    opcode: 
      aes64esm: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(64, ["rs1_val","rs2_val"])': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [64, 64])': 0

aes64ks1i:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zknd.*)
      - check ISA:=regex(.*RV64.*I.*Zkne.*)
    opcode: 
      aes64ks1i: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(64, ["rs1_val", "imm_val"], "Y")': 0
        'uniform_random(20, 100, ["rs1_val","imm_val"], [64, log(10,2)])': 0

aes64ks2:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zknd.*)
      - check ISA:=regex(.*RV64.*I.*Zkne.*)
    opcode: 
      aes64ks2: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'walking_ones("rs1_val", 64, False)': 0
        'walking_ones("rs2_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'walking_zeros("rs2_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [64, 64])': 0
        
sha256sig0:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zknh.*)
    opcode: 
      sha256sig0: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0

sha256sig1:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zknh.*)
    opcode: 
      sha256sig1: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0
        
sha256sum0:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zknh.*)
    opcode: 
      sha256sum0: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0
        
sha256sum1:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zknh.*)
    opcode: 
      sha256sum1: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0

sha512sig0:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zknh.*)
    opcode: 
      sha512sig0: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0

sha512sig1:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zknh.*)
    opcode: 
      sha512sig1: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0
        
sha512sum0:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zknh.*)
    opcode: 
      sha512sum0: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0
        
sha512sum1:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zknh.*)
    opcode: 
      sha512sum1: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0
        
sm3p0:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zksh.*)
    opcode: 
      sm3p0: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0
        
sm3p1:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zksh.*)
    opcode: 
      sm3p1: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0
        
aes64im:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zknd.*)
    opcode: 
      aes64im: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'walking_ones("rs1_val", 64, False)': 0
        'walking_zeros("rs1_val", 64, False)': 0
        'uniform_random(20, 100, ["rs1_val"], [64])': 0
        
sm4ed:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zksed.*)
    opcode: 
      sm4ed: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'byte_count(64, ["rs1_val","rs2_val","imm_val"], "Y")': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val","imm_val"], [64, 64, 2])': 0

sm4ks:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zksed.*)
    opcode: 
      sm4ks: 0
    rs1: 
      <<: *all_regs
    rs2:
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'byte_count(64, ["rs1_val","rs2_val","imm_val"], "Y")': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val","imm_val"], [64, 64, 2])': 0
        
ror:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkb.*)
    opcode: 
      ror: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        
rol:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkb.*)
    opcode: 
      rol: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        
rori:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkb.*)
    opcode: 
      rori: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val", "imm_val"], [64,6])': 0
        'trailing_ones(64, ["rs1_val", "imm_val"], [64,6])': 0
        'leading_zeros(64, ["rs1_val", "imm_val"], [64,6])': 0
        'trailing_zeros(64, ["rs1_val", "imm_val"], [64,6])': 0

rorw:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zks.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zbkb.*)
    opcode: 
      rorw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        
rolw:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zks.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zbkb.*)
    opcode: 
      rolw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        
roriw:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zs.*)
      - check ISA:=regex(.*RV64.*I.*Zks.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zbkb.*)
    opcode: 
      roriw: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val", "imm_val"], [64,5])': 0
        'trailing_ones(64, ["rs1_val", "imm_val"], [64,5])': 0
        'leading_zeros(64, ["rs1_val", "imm_val"], [64,5])': 0
        'trailing_zeros(64, ["rs1_val", "imm_val"], [64,5])': 0
        
brev8:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkb.*)
    opcode: 
      brev8: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val"], [64])': 0
        'trailing_ones(64, ["rs1_val"], [64])': 0
        'leading_zeros(64, ["rs1_val"], [64])': 0
        'trailing_zeros(64, ["rs1_val"], [64])': 0
        
rev8:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkb.*)
    opcode: 
      grevi: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val"], [64])': 0
        'trailing_ones(64, ["rs1_val"], [64])': 0
        'leading_zeros(64, ["rs1_val"], [64])': 0
        'trailing_zeros(64, ["rs1_val"], [64])': 0
        

clmul:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkc.*)
    opcode: 
      clmul: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        
clmulh:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkc.*)
    opcode: 
      clmulh: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0

andn:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkb.*)
    opcode: 
      andn: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0

orn:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkb.*)
    opcode: 
      orn: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0

xnor:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkb.*)
    opcode: 
      xnor: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0

pack:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkb.*)
    opcode: 
      pack: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0

packh:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkb.*)
    opcode: 
      packh: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        
packw:
    config: 
      - check ISA:=regex(.*RV64.*I.*K.*)
      - check ISA:=regex(.*RV64.*I.*Zk.*)
      - check ISA:=regex(.*RV64.*I.*Zks.*)
      - check ISA:=regex(.*RV64.*I.*Zkn.*)
      - check ISA:=regex(.*RV64.*I.*Zbkb.*)
    opcode: 
      packw: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0

xperm4:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkx.*)
    opcode: 
      xperm4: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [64, 64])': 0
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        
xperm8:
    config: 
      - check ISA:=regex(.*I.*K.*)
      - check ISA:=regex(.*I.*Zk.*)
      - check ISA:=regex(.*I.*Zks.*)
      - check ISA:=regex(.*I.*Zkn.*)
      - check ISA:=regex(.*I.*Zbkx.*)
    opcode: 
      xperm8: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:      
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [64, 64])': 0
        'leading_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_ones(64, ["rs1_val","rs2_val"], [64,64])': 0
        'leading_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        'trailing_zeros(64, ["rs1_val","rs2_val"], [64,64])': 0
        
