bclr:
    config: 
      - check ISA:=regex(.*RV64.*I.*B.*)
      - check ISA:=regex(.*RV64.*I.*Zbs.*)
    opcode: 
      bclr: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'xlenlim("rs1_val", xlen)': 0
        'xlenlim("rs2_val", xlen )': 0
        'walking_ones("rs1_val", ceil(log(xlen, 2)), False)': 0
        'walking_ones("rs2_val", ceil(log(xlen, 2)), False)': 0
        
bclri:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bclri: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'xlenlim("rs1_val", xlen)': 0
        
bext:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bext: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'xlenlim("rs1_val", xlen)': 0
        'xlenlim("rs2_val", xlen )': 0
        'walking_ones("rs1_val", ceil(log(xlen, 2)), False)': 0
        'walking_ones("rs2_val", ceil(log(xlen, 2)), False)': 0
        
bexti:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bexti: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'xlenlim("rs1_val", xlen)': 0
        
binv:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      binv: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'xlenlim("rs1_val", xlen)': 0
        'xlenlim("rs2_val", xlen )': 0
        'walking_ones("rs1_val", ceil(log(xlen, 2)), False)': 0
        'walking_ones("rs2_val", ceil(log(xlen, 2)), False)': 0
        
binvi:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      binvi: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'xlenlim("rs1_val", xlen)': 0
        
bset:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bset: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'xlenlim("rs1_val", xlen)': 0
        'xlenlim("rs2_val", xlen )': 0
        'walking_ones("rs1_val", ceil(log(xlen, 2)), False)': 0
        'walking_ones("rs2_val", ceil(log(xlen, 2)), False)': 0
        
bseti:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bseti: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'xlenlim("rs1_val", xlen)': 0
