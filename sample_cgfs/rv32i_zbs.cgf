bclr:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bclr: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_ones("rs2_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'walking_zeros("rs2_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        
bclri:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bclri: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_ones(32, ["rs1_val", "imm_val"], [32,5])': 0
        'leading_zeros(32, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_zeros(32, ["rs1_val", "imm_val"], [32,5])': 0
        
bext:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bext: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_ones("rs2_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'walking_zeros("rs2_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        
bexti:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bexti: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_ones(32, ["rs1_val", "imm_val"], [32,5])': 0
        'leading_zeros(32, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_zeros(32, ["rs1_val", "imm_val"], [32,5])': 0
        
binv:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      binv: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_ones("rs2_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'walking_zeros("rs2_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        
binvi:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      binvi: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_ones(32, ["rs1_val", "imm_val"], [32,5])': 0
        'leading_zeros(32, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_zeros(32, ["rs1_val", "imm_val"], [32,5])': 0
        
bset:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bset: 0
    rs1: 
      <<: *all_regs
    rs2: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *rfmt_op_comb
    val_comb:
      abstract_comb:
        'walking_ones("rs1_val", xlen, False)': 0
        'walking_ones("rs2_val", xlen, False)': 0
        'walking_zeros("rs1_val", xlen, False)': 0
        'walking_zeros("rs2_val", xlen, False)': 0
        'uniform_random(20, 100, ["rs1_val","rs2_val"], [xlen, xlen])': 0
        
bseti:
    config: 
      - check ISA:=regex(.*RV32.*I.*B.*)
      - check ISA:=regex(.*RV32.*I.*Zbs.*)
    opcode: 
      bseti: 0
    rs1: 
      <<: *all_regs
    rd:
      <<: *all_regs
    op_comb: 
      <<: *ifmt_op_comb
    val_comb:
      abstract_comb:      
        'leading_ones(32, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_ones(32, ["rs1_val", "imm_val"], [32,5])': 0
        'leading_zeros(32, ["rs1_val", "imm_val"], [32,5])': 0
        'trailing_zeros(32, ["rs1_val", "imm_val"], [32,5])': 0
